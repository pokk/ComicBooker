import dependenices.Deps.Data
import dependenices.Deps.Global
import dependenices.Versions.Android

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion Android.compileSdk

    defaultConfig {
        minSdkVersion Android.minSdk
        targetSdkVersion Android.compileSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
            buildConfigField 'String', 'URL_SERVER', '"http://' + getLocalIp('en0') + ':3000"'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions { abortOnError false }
    ext { coverageSourceDirs = 'src/test/java' }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':domain')
    implementation project(':ext')

    implementation Global.kotlin
    implementation Global.coroutine
    implementation Global.shaver
    implementation Global.gson

    kapt Data.roomAnnotation
    implementation Data.room

    //region Internet & Image loading
    implementation Data.retrofit2
    implementation(Data.retrofit2AdapterCoroutine) {
        exclude group: 'org.jetbrains.kotlinx', module: 'kotlinx-coroutines-core'
    }
    //endregion
}

tasks.withType(Test) { jacoco.includeNoLocationClasses = true }
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

// Get the ip address by interface name
// en0 is WIFI interface
static def getLocalIp(String interfaceName) {
    NetworkInterface iface = NetworkInterface.getByName(interfaceName)
    for (InterfaceAddress address : iface.getInterfaceAddresses()) {
        String ip = address.getAddress().getHostAddress()
        if (ip.length() <= 15) {
            return ip
        }
    }
}
